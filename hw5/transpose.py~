"""

C. Andrews 2006

"""

import wx
from wx.glcanvas import GLCanvas
#from OpenGL.GLUT import *
from OpenGL.GLU import *
from OpenGL.GL import *
import Numeric




class GLTranspose(GLCanvas):
    """Basic template for a GLCanvas that can do simple 2D OpenGL drawing"""
    def __init__(self, parent):
        """This needs to be given the parent in the GUI hierarchy so we can properly initialize the canvas"""
        GLCanvas.__init__(self, parent, -1)
        self.init = 0

        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.command = []
        self.macro = {}
        self.macrostate = 0
        self.displaylist = None
        return


    def SetupView(self):
        """This function does the actual work to setup the window so we can draw in it. We'll 
        explain this in more detail later.
        """
        self.SetCurrent()
        size = self.GetSizeTuple()
        glViewport(0,0,size[0], size[1])
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluOrtho2D(-500,500, -500, 500)



    def InitGL(self):
        """This function does some of the one time OpenGL initialization we need to perform. Again, 
        we'll describe this in more detail later.
        """
        self.SetCurrent()
        glClearColor(0.0,0.0,0.0,0.0); # set clear color to black
        self.SetupView()
        return



    def OnPaint(self,event):
        """This function is called when the canvas recieves notice that it needs to repaint its 
        surface. This just makes sure that OpenGL is inited and passes the work off to another 
        function.
        """
        dc = wx.PaintDC(self)
        if not self.init:
            self.InitGL()
            self.init = 1
        self.OnDraw()
        return

    def OnSize(self,event):
        """ This function is called when a resize event occurs. The primary
        purpose for this is to readjust the viewport appropriately.
        """
        self.SetupView()
        if self.init:
            self.OnDraw()
        event.Skip() 
        
    def OnDraw(self):
        """This is the main drawing function. We will put all of our OpenGL drawing calls in here. 
        If we want to force a repaint, this is the function that should be called. Note that this 
        should always start by calling SetCurrent() and end by calling SwapBuffers().
        """
               
        self.SetCurrent()

        glClear(GL_COLOR_BUFFER_BIT)

        
        if self.displaylist is None:
            self.displaylist = glGenLists(1)            
            glNewList(self.displaylist, GL_COMPILE_AND_EXECUTE)
            self.DrawList(self.command)
            glEndList()            
        else:
            glCallList(self.displaylist)
        
        
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()
            
                        

        self.SwapBuffers()

        return

    def DoDisplay(self, filename):
        f = open(filename, 'r')
        self.command = f.read()
        self.command = self.command.split('\n')
        
        for i in range(len(self.command)):
            self.command[i] = self.command[i].split()
        
        self.displaylist = None
        self.OnDraw()
        
    
    def DrawSquare(self):
        glBegin(GL_LINE_LOOP)
        glVertex2i(-5,-5)
        glVertex2i(-5,5)
        glVertex2i(5,5)
        glVertex2i(5,-5)
        glEnd()

    def DrawList(self, commandlist):                
        
        for command in commandlist:
            if self.macrostate == 1:
                if command[0] == "end":
                    self.macrostate = 0
                    self.macroname = ''
                else:
                    self.macro[self.macroname].append(command)                                            
            else:
            
                if command[0] == "draw":
                    self.DrawSquare()
                elif command[0] == "translate":
                    glTranslatef(float(command[1]), float(command[2]), 0)
                elif command[0] == "scale":
                    glScalef(float(command[1]), float(command[2]), 1)
                elif command[0] == "rotate":
                    glRotatef(float(command[1]), 0, 0, 1)
                elif command[0] == "shear":
                    sheer = Numeric.identity(4, 'f')
                    sheer[0][1] = float(command[1])
                    sheer[1][0] = float(command[2])
                    glMultMatrixf(sheer)
                elif command[0] == "push":
                    glPushMatrix()
                elif command[0] == "pop":
                    glPopMatrix()
                elif command[0] == "start":
                    self.macrostate = 1
                    self.macroname = command[1]
                    self.macro[self.macroname] = []
                else:
                    if self.macro.has_key(command[0]):
                        self.DrawList(self.macro[command[0]])
                    else:
                        print "Invalid command: ", command[0]
